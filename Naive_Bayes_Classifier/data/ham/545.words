system
also
maintains
long
range
contacts
in
order
to
minimize
network
diameter
and
avoid
some
of
the
issues
such
as
latency
that
would
be
faced
if
neighbor
groups
grew
to
be
very
large
and
the
whole
network
was
based
on
only
Delaunay
triangulation
The
PTrees
approach
presents
a
method
to
facilitate
queries
that
are
more
semantically
rich
than
simple
lookups
based
on
a
key
that
is
mapped
to
an
object
This
system
is
designed
to
be
adapted
to
a
system
like
Chord
The
PTrees
approach
is
based
on
B
trees
Nodes
in
the
system
essentially
hold
parts
of
the
tree
and
rely
on
other
nodes
in
the
system
to
complete
the
tree
A
stabilization
process
is
presented
to
deal
with
nodes
that
leave
and
join
the
system
The
system
is
able
to
continue
to
work
even
in
the
face
of
changes
to
the
network
but
with
some
detriments
to
performance
Mercury
is
a
system
for
multiattribute
range
queries
Mercury
is
based
on
creating
routing
hubs
that
are
used
to
handle
different
attributes
that
may
be
present
in
the
data
that
is
stored
in
the
system
Mercury
also
arranges
routing
hubs
into
a
ring
but
like
GeoPeer
this
cannot
be
a
random
ring
and
must
be
ordered
in
a
way
to
have
data
organized
contiguously
to
facilitate
the
range
searching
The
system
maintains
a
mechanism
to
poll
sample
nodes
to
get
an
idea
of
different
system
metrics
and
another
mechanism
for
loadbalancing
The
loadbalancing
is
particularly
important
in
a
system
like
Mercury
because
there
may
not
be
a
uniform
distribution
of
objects
in
this
system
Another
feature
offered
by
the
system
is
for
caching
objects
at
longdistance
nodes
One
of
the
issues
that
may
arise
with
both
GeoPeer
and
the
PTrees
system
deals
with
high
churn
systems
GeoPeer
seems
to
have
a
fairly
complicated
procedure
to
deal
with
nodes
joining
or
leaving
the
network
and
many
messages
seem
to
be
passed
between
the
nodes
in
a
given
locality
This
could
become
an
issue
if
there
are
rapid
joins
and
nodes
in
a
given
neighborhood
The
PTrees
system
has
mechanisms
to
deal
with
nodes
leaving
and
joining
the
system
but
it
seems
that
performance
may
be
noticeably
degraded
in
a
system
where
there
are
a
lot
of
inconsistencies
One
issue
seen
in
Mercury
deals
with
scalability
In
the
example
of
the
game
provided
in
the
paper
the
authors
only
seem
to
be
confident
in
the
scalability
of
the
system
up
to
thousands
of
nodes
if
game
specific
caching
was
implemented
However
it
is
not
unimaginable
that
popular
applications
such
as
games
may
incorporate
more
information
to
be
shared
stricter
latency
requirements
and
many
more
participants
perhaps
in
the
millions
